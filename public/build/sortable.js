(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sortable"],{

/***/ "./assets/css/sortable.css":
/*!*********************************!*\
  !*** ./assets/css/sortable.css ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/js/sortable-table.js":
/*!*************************************!*\
  !*** ./assets/js/sortable-table.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../css/sortable.css */ "./assets/css/sortable.css");

__webpack_require__(/*! ../js/sortable.js */ "./assets/js/sortable.js");

/***/ }),

/***/ "./assets/js/sortable.js":
/*!*******************************!*\
  !*** ./assets/js/sortable.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Code JS du trie des champs d'un tableau */
function findAncestor(el, cls) {
  while ((el = el.parentElement) && !el.classList.contains(cls)) {
    ;
  }

  return el;
}

function unformatNumberString(number) {
  number = number.replace(/[^\d\.-]/g, '');
  return Number(number);
}

function extractStringContent(s) {
  var span = document.createElement('span');
  span.innerHTML = s;
  return span.textContent || span.innerText;
}

;

function setColHeaderDirection(newDirection, colIndex, colHeaders) {
  for (var index = 0; index < colHeaders.length; index++) {
    if (index == colIndex) {
      colHeaders[colIndex].setAttribute("data-sort-direction", newDirection);
    } else {
      colHeaders[index].setAttribute("data-sort-direction", 0);
    }
  }
}

function renderSortedTable(table, data) {
  var tableRows = table.getElementsByTagName("tbody")[0].getElementsByTagName("tr");

  for (var rowIndex = 0; rowIndex < tableRows.length; rowIndex++) {
    var tableRowCells = tableRows[rowIndex].getElementsByTagName("td");

    for (var cellIndex = 0; cellIndex < tableRowCells.length; cellIndex++) {
      tableRowCells[cellIndex].innerHTML = data[rowIndex][cellIndex];
    }
  }
}

$(document).ready(function () {
  var sortableTables = document.getElementsByClassName("sortable-table");
  var tablesData = [];
  var test = $("#table");

  var _loop = function _loop(tableIndex) {
    sortableTables[tableIndex].setAttribute("data-sort-index", tableIndex); // fill tablesData

    var tableRows = sortableTables[tableIndex].getElementsByTagName("tbody")[0].getElementsByTagName("tr");

    for (var rowIndex = 0; rowIndex < tableRows.length; rowIndex++) {
      var tableRowCells = tableRows[rowIndex].getElementsByTagName("td");

      for (var cellIndex = 0; cellIndex < tableRowCells.length; cellIndex++) {
        if (tablesData[tableIndex] === void 0) {
          tablesData.splice(tableIndex, 0, []);
        }

        if (tablesData[tableIndex][rowIndex] === void 0) {
          tablesData[tableIndex].splice(rowIndex, 0, []);
        }

        tablesData[tableIndex][rowIndex].splice(cellIndex, 0, tableRowCells[cellIndex].innerHTML);
      }
    } // bind headers to event


    var tableHeaders = sortableTables[tableIndex].getElementsByTagName("thead")[0].getElementsByTagName("tr")[0].getElementsByTagName("th");

    var _loop2 = function _loop2(headerIndex) {
      var colIsNumeric = tableHeaders[headerIndex].classList.contains("numeric-sort");
      tableHeaders[headerIndex].setAttribute("data-sort-direction", 0);
      tableHeaders[headerIndex].setAttribute("data-sort-index", headerIndex);
      $(".no-sortable").removeAttr("data-sort-direction");
      $(".no-sortable").removeAttr("data-sort-index"); // Header Click Event

      tableHeaders[headerIndex].addEventListener('click', function () {
        var colSortDirection = this.getAttribute("data-sort-direction");
        var headerIndex = this.getAttribute("data-sort-index");
        var tableIndex = findAncestor(this, "sortable-table").getAttribute("data-sort-index");

        if (colSortDirection == 1) {
          setColHeaderDirection(-1, headerIndex, tableHeaders);
        } else {
          setColHeaderDirection(1, headerIndex, tableHeaders);
        }

        tablesData[tableIndex] = tablesData[tableIndex].sort(function (a, b) {
          var x = extractStringContent(a[headerIndex]);
          var y = extractStringContent(b[headerIndex]);

          if (colIsNumeric) {
            x = unformatNumberString(x);
            y = unformatNumberString(y);
          }

          if (x === y) {
            return 0;
          } else {
            if (colSortDirection == 1) {
              // it was up and now it's down
              return x > y ? -1 : 1;
            } else {
              return x < y ? -1 : 1;
            }
          }
        });
        renderSortedTable(sortableTables[tableIndex], tablesData[tableIndex]);
      });
    };

    for (var headerIndex = 0; headerIndex < tableHeaders.length; headerIndex++) {
      _loop2(headerIndex);
    }
  };

  for (var tableIndex = 0; tableIndex < sortableTables.length; tableIndex++) {
    _loop(tableIndex);
  }
});

/***/ })

},[["./assets/js/sortable-table.js","runtime"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,